/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LibraryResourceService } from "../libraryResource.service";
import { LibraryResourceCreateInput } from "./LibraryResourceCreateInput";
import { LibraryResource } from "./LibraryResource";
import { LibraryResourceFindManyArgs } from "./LibraryResourceFindManyArgs";
import { LibraryResourceWhereUniqueInput } from "./LibraryResourceWhereUniqueInput";
import { LibraryResourceUpdateInput } from "./LibraryResourceUpdateInput";

export class LibraryResourceControllerBase {
  constructor(protected readonly service: LibraryResourceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LibraryResource })
  async createLibraryResource(
    @common.Body() data: LibraryResourceCreateInput
  ): Promise<LibraryResource> {
    return await this.service.createLibraryResource({
      data: data,
      select: {
        author: true,
        availability: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LibraryResource] })
  @ApiNestedQuery(LibraryResourceFindManyArgs)
  async libraryResources(
    @common.Req() request: Request
  ): Promise<LibraryResource[]> {
    const args = plainToClass(LibraryResourceFindManyArgs, request.query);
    return this.service.libraryResources({
      ...args,
      select: {
        author: true,
        availability: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LibraryResource })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async libraryResource(
    @common.Param() params: LibraryResourceWhereUniqueInput
  ): Promise<LibraryResource | null> {
    const result = await this.service.libraryResource({
      where: params,
      select: {
        author: true,
        availability: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LibraryResource })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLibraryResource(
    @common.Param() params: LibraryResourceWhereUniqueInput,
    @common.Body() data: LibraryResourceUpdateInput
  ): Promise<LibraryResource | null> {
    try {
      return await this.service.updateLibraryResource({
        where: params,
        data: data,
        select: {
          author: true,
          availability: true,
          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LibraryResource })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLibraryResource(
    @common.Param() params: LibraryResourceWhereUniqueInput
  ): Promise<LibraryResource | null> {
    try {
      return await this.service.deleteLibraryResource({
        where: params,
        select: {
          author: true,
          availability: true,
          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
