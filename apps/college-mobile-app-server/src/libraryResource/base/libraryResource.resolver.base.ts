/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LibraryResource } from "./LibraryResource";
import { LibraryResourceCountArgs } from "./LibraryResourceCountArgs";
import { LibraryResourceFindManyArgs } from "./LibraryResourceFindManyArgs";
import { LibraryResourceFindUniqueArgs } from "./LibraryResourceFindUniqueArgs";
import { CreateLibraryResourceArgs } from "./CreateLibraryResourceArgs";
import { UpdateLibraryResourceArgs } from "./UpdateLibraryResourceArgs";
import { DeleteLibraryResourceArgs } from "./DeleteLibraryResourceArgs";
import { LibraryResourceService } from "../libraryResource.service";
@graphql.Resolver(() => LibraryResource)
export class LibraryResourceResolverBase {
  constructor(protected readonly service: LibraryResourceService) {}

  async _libraryResourcesMeta(
    @graphql.Args() args: LibraryResourceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LibraryResource])
  async libraryResources(
    @graphql.Args() args: LibraryResourceFindManyArgs
  ): Promise<LibraryResource[]> {
    return this.service.libraryResources(args);
  }

  @graphql.Query(() => LibraryResource, { nullable: true })
  async libraryResource(
    @graphql.Args() args: LibraryResourceFindUniqueArgs
  ): Promise<LibraryResource | null> {
    const result = await this.service.libraryResource(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LibraryResource)
  async createLibraryResource(
    @graphql.Args() args: CreateLibraryResourceArgs
  ): Promise<LibraryResource> {
    return await this.service.createLibraryResource({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LibraryResource)
  async updateLibraryResource(
    @graphql.Args() args: UpdateLibraryResourceArgs
  ): Promise<LibraryResource | null> {
    try {
      return await this.service.updateLibraryResource({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LibraryResource)
  async deleteLibraryResource(
    @graphql.Args() args: DeleteLibraryResourceArgs
  ): Promise<LibraryResource | null> {
    try {
      return await this.service.deleteLibraryResource(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
