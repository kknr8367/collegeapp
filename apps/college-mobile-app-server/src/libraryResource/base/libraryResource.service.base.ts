/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LibraryResource as PrismaLibraryResource,
} from "@prisma/client";

export class LibraryResourceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LibraryResourceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.libraryResource.count(args);
  }

  async libraryResources(
    args: Prisma.LibraryResourceFindManyArgs
  ): Promise<PrismaLibraryResource[]> {
    return this.prisma.libraryResource.findMany(args);
  }
  async libraryResource(
    args: Prisma.LibraryResourceFindUniqueArgs
  ): Promise<PrismaLibraryResource | null> {
    return this.prisma.libraryResource.findUnique(args);
  }
  async createLibraryResource(
    args: Prisma.LibraryResourceCreateArgs
  ): Promise<PrismaLibraryResource> {
    return this.prisma.libraryResource.create(args);
  }
  async updateLibraryResource(
    args: Prisma.LibraryResourceUpdateArgs
  ): Promise<PrismaLibraryResource> {
    return this.prisma.libraryResource.update(args);
  }
  async deleteLibraryResource(
    args: Prisma.LibraryResourceDeleteArgs
  ): Promise<PrismaLibraryResource> {
    return this.prisma.libraryResource.delete(args);
  }
}
