/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ClassModel } from "./ClassModel";
import { ClassModelCountArgs } from "./ClassModelCountArgs";
import { ClassModelFindManyArgs } from "./ClassModelFindManyArgs";
import { ClassModelFindUniqueArgs } from "./ClassModelFindUniqueArgs";
import { CreateClassModelArgs } from "./CreateClassModelArgs";
import { UpdateClassModelArgs } from "./UpdateClassModelArgs";
import { DeleteClassModelArgs } from "./DeleteClassModelArgs";
import { CourseMaterialFindManyArgs } from "../../courseMaterial/base/CourseMaterialFindManyArgs";
import { CourseMaterial } from "../../courseMaterial/base/CourseMaterial";
import { User } from "../../user/base/User";
import { ClassModelService } from "../classModel.service";
@graphql.Resolver(() => ClassModel)
export class ClassModelResolverBase {
  constructor(protected readonly service: ClassModelService) {}

  async _classModelsMeta(
    @graphql.Args() args: ClassModelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ClassModel])
  async classModels(
    @graphql.Args() args: ClassModelFindManyArgs
  ): Promise<ClassModel[]> {
    return this.service.classModels(args);
  }

  @graphql.Query(() => ClassModel, { nullable: true })
  async classModel(
    @graphql.Args() args: ClassModelFindUniqueArgs
  ): Promise<ClassModel | null> {
    const result = await this.service.classModel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ClassModel)
  async createClassModel(
    @graphql.Args() args: CreateClassModelArgs
  ): Promise<ClassModel> {
    return await this.service.createClassModel({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ClassModel)
  async updateClassModel(
    @graphql.Args() args: UpdateClassModelArgs
  ): Promise<ClassModel | null> {
    try {
      return await this.service.updateClassModel({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClassModel)
  async deleteClassModel(
    @graphql.Args() args: DeleteClassModelArgs
  ): Promise<ClassModel | null> {
    try {
      return await this.service.deleteClassModel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [CourseMaterial], { name: "courseMaterials" })
  async findCourseMaterials(
    @graphql.Parent() parent: ClassModel,
    @graphql.Args() args: CourseMaterialFindManyArgs
  ): Promise<CourseMaterial[]> {
    const results = await this.service.findCourseMaterials(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: ClassModel): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
