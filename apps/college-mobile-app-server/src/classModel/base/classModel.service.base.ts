/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ClassModel as PrismaClassModel,
  CourseMaterial as PrismaCourseMaterial,
  User as PrismaUser,
} from "@prisma/client";

export class ClassModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ClassModelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.classModel.count(args);
  }

  async classModels(
    args: Prisma.ClassModelFindManyArgs
  ): Promise<PrismaClassModel[]> {
    return this.prisma.classModel.findMany(args);
  }
  async classModel(
    args: Prisma.ClassModelFindUniqueArgs
  ): Promise<PrismaClassModel | null> {
    return this.prisma.classModel.findUnique(args);
  }
  async createClassModel(
    args: Prisma.ClassModelCreateArgs
  ): Promise<PrismaClassModel> {
    return this.prisma.classModel.create(args);
  }
  async updateClassModel(
    args: Prisma.ClassModelUpdateArgs
  ): Promise<PrismaClassModel> {
    return this.prisma.classModel.update(args);
  }
  async deleteClassModel(
    args: Prisma.ClassModelDeleteArgs
  ): Promise<PrismaClassModel> {
    return this.prisma.classModel.delete(args);
  }

  async findCourseMaterials(
    parentId: string,
    args: Prisma.CourseMaterialFindManyArgs
  ): Promise<PrismaCourseMaterial[]> {
    return this.prisma.classModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .courseMaterials(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.classModel
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
