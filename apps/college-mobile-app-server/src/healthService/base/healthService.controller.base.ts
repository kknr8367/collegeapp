/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HealthServiceService } from "../healthService.service";
import { HealthServiceCreateInput } from "./HealthServiceCreateInput";
import { HealthService } from "./HealthService";
import { HealthServiceFindManyArgs } from "./HealthServiceFindManyArgs";
import { HealthServiceWhereUniqueInput } from "./HealthServiceWhereUniqueInput";
import { HealthServiceUpdateInput } from "./HealthServiceUpdateInput";

export class HealthServiceControllerBase {
  constructor(protected readonly service: HealthServiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: HealthService })
  async createHealthService(
    @common.Body() data: HealthServiceCreateInput
  ): Promise<HealthService> {
    return await this.service.createHealthService({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [HealthService] })
  @ApiNestedQuery(HealthServiceFindManyArgs)
  async healthServices(
    @common.Req() request: Request
  ): Promise<HealthService[]> {
    const args = plainToClass(HealthServiceFindManyArgs, request.query);
    return this.service.healthServices({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: HealthService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async healthService(
    @common.Param() params: HealthServiceWhereUniqueInput
  ): Promise<HealthService | null> {
    const result = await this.service.healthService({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: HealthService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHealthService(
    @common.Param() params: HealthServiceWhereUniqueInput,
    @common.Body() data: HealthServiceUpdateInput
  ): Promise<HealthService | null> {
    try {
      return await this.service.updateHealthService({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: HealthService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHealthService(
    @common.Param() params: HealthServiceWhereUniqueInput
  ): Promise<HealthService | null> {
    try {
      return await this.service.deleteHealthService({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
