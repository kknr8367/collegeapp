/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CourseMaterialService } from "../courseMaterial.service";
import { CourseMaterialCreateInput } from "./CourseMaterialCreateInput";
import { CourseMaterial } from "./CourseMaterial";
import { CourseMaterialFindManyArgs } from "./CourseMaterialFindManyArgs";
import { CourseMaterialWhereUniqueInput } from "./CourseMaterialWhereUniqueInput";
import { CourseMaterialUpdateInput } from "./CourseMaterialUpdateInput";

export class CourseMaterialControllerBase {
  constructor(protected readonly service: CourseMaterialService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CourseMaterial })
  async createCourseMaterial(
    @common.Body() data: CourseMaterialCreateInput
  ): Promise<CourseMaterial> {
    return await this.service.createCourseMaterial({
      data: {
        ...data,

        classField: data.classField
          ? {
              connect: data.classField,
            }
          : undefined,
      },
      select: {
        classField: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CourseMaterial] })
  @ApiNestedQuery(CourseMaterialFindManyArgs)
  async courseMaterials(
    @common.Req() request: Request
  ): Promise<CourseMaterial[]> {
    const args = plainToClass(CourseMaterialFindManyArgs, request.query);
    return this.service.courseMaterials({
      ...args,
      select: {
        classField: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CourseMaterial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async courseMaterial(
    @common.Param() params: CourseMaterialWhereUniqueInput
  ): Promise<CourseMaterial | null> {
    const result = await this.service.courseMaterial({
      where: params,
      select: {
        classField: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CourseMaterial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCourseMaterial(
    @common.Param() params: CourseMaterialWhereUniqueInput,
    @common.Body() data: CourseMaterialUpdateInput
  ): Promise<CourseMaterial | null> {
    try {
      return await this.service.updateCourseMaterial({
        where: params,
        data: {
          ...data,

          classField: data.classField
            ? {
                connect: data.classField,
              }
            : undefined,
        },
        select: {
          classField: {
            select: {
              id: true,
            },
          },

          content: true,
          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CourseMaterial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCourseMaterial(
    @common.Param() params: CourseMaterialWhereUniqueInput
  ): Promise<CourseMaterial | null> {
    try {
      return await this.service.deleteCourseMaterial({
        where: params,
        select: {
          classField: {
            select: {
              id: true,
            },
          },

          content: true,
          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
