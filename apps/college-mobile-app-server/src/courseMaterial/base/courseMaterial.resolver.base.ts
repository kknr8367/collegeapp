/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CourseMaterial } from "./CourseMaterial";
import { CourseMaterialCountArgs } from "./CourseMaterialCountArgs";
import { CourseMaterialFindManyArgs } from "./CourseMaterialFindManyArgs";
import { CourseMaterialFindUniqueArgs } from "./CourseMaterialFindUniqueArgs";
import { CreateCourseMaterialArgs } from "./CreateCourseMaterialArgs";
import { UpdateCourseMaterialArgs } from "./UpdateCourseMaterialArgs";
import { DeleteCourseMaterialArgs } from "./DeleteCourseMaterialArgs";
import { ClassModel } from "../../classModel/base/ClassModel";
import { CourseMaterialService } from "../courseMaterial.service";
@graphql.Resolver(() => CourseMaterial)
export class CourseMaterialResolverBase {
  constructor(protected readonly service: CourseMaterialService) {}

  async _courseMaterialsMeta(
    @graphql.Args() args: CourseMaterialCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CourseMaterial])
  async courseMaterials(
    @graphql.Args() args: CourseMaterialFindManyArgs
  ): Promise<CourseMaterial[]> {
    return this.service.courseMaterials(args);
  }

  @graphql.Query(() => CourseMaterial, { nullable: true })
  async courseMaterial(
    @graphql.Args() args: CourseMaterialFindUniqueArgs
  ): Promise<CourseMaterial | null> {
    const result = await this.service.courseMaterial(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CourseMaterial)
  async createCourseMaterial(
    @graphql.Args() args: CreateCourseMaterialArgs
  ): Promise<CourseMaterial> {
    return await this.service.createCourseMaterial({
      ...args,
      data: {
        ...args.data,

        classField: args.data.classField
          ? {
              connect: args.data.classField,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CourseMaterial)
  async updateCourseMaterial(
    @graphql.Args() args: UpdateCourseMaterialArgs
  ): Promise<CourseMaterial | null> {
    try {
      return await this.service.updateCourseMaterial({
        ...args,
        data: {
          ...args.data,

          classField: args.data.classField
            ? {
                connect: args.data.classField,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CourseMaterial)
  async deleteCourseMaterial(
    @graphql.Args() args: DeleteCourseMaterialArgs
  ): Promise<CourseMaterial | null> {
    try {
      return await this.service.deleteCourseMaterial(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => ClassModel, {
    nullable: true,
    name: "classField",
  })
  async getClassField(
    @graphql.Parent() parent: CourseMaterial
  ): Promise<ClassModel | null> {
    const result = await this.service.getClassField(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
