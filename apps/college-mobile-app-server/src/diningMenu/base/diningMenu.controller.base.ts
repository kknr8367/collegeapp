/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DiningMenuService } from "../diningMenu.service";
import { DiningMenuCreateInput } from "./DiningMenuCreateInput";
import { DiningMenu } from "./DiningMenu";
import { DiningMenuFindManyArgs } from "./DiningMenuFindManyArgs";
import { DiningMenuWhereUniqueInput } from "./DiningMenuWhereUniqueInput";
import { DiningMenuUpdateInput } from "./DiningMenuUpdateInput";

export class DiningMenuControllerBase {
  constructor(protected readonly service: DiningMenuService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DiningMenu })
  async createDiningMenu(
    @common.Body() data: DiningMenuCreateInput
  ): Promise<DiningMenu> {
    return await this.service.createDiningMenu({
      data: data,
      select: {
        createdAt: true,
        hours: true,
        id: true,
        item: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DiningMenu] })
  @ApiNestedQuery(DiningMenuFindManyArgs)
  async diningMenus(@common.Req() request: Request): Promise<DiningMenu[]> {
    const args = plainToClass(DiningMenuFindManyArgs, request.query);
    return this.service.diningMenus({
      ...args,
      select: {
        createdAt: true,
        hours: true,
        id: true,
        item: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DiningMenu })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async diningMenu(
    @common.Param() params: DiningMenuWhereUniqueInput
  ): Promise<DiningMenu | null> {
    const result = await this.service.diningMenu({
      where: params,
      select: {
        createdAt: true,
        hours: true,
        id: true,
        item: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DiningMenu })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDiningMenu(
    @common.Param() params: DiningMenuWhereUniqueInput,
    @common.Body() data: DiningMenuUpdateInput
  ): Promise<DiningMenu | null> {
    try {
      return await this.service.updateDiningMenu({
        where: params,
        data: data,
        select: {
          createdAt: true,
          hours: true,
          id: true,
          item: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DiningMenu })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDiningMenu(
    @common.Param() params: DiningMenuWhereUniqueInput
  ): Promise<DiningMenu | null> {
    try {
      return await this.service.deleteDiningMenu({
        where: params,
        select: {
          createdAt: true,
          hours: true,
          id: true,
          item: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
