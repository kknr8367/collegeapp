/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DiningMenu } from "./DiningMenu";
import { DiningMenuCountArgs } from "./DiningMenuCountArgs";
import { DiningMenuFindManyArgs } from "./DiningMenuFindManyArgs";
import { DiningMenuFindUniqueArgs } from "./DiningMenuFindUniqueArgs";
import { CreateDiningMenuArgs } from "./CreateDiningMenuArgs";
import { UpdateDiningMenuArgs } from "./UpdateDiningMenuArgs";
import { DeleteDiningMenuArgs } from "./DeleteDiningMenuArgs";
import { DiningMenuService } from "../diningMenu.service";
@graphql.Resolver(() => DiningMenu)
export class DiningMenuResolverBase {
  constructor(protected readonly service: DiningMenuService) {}

  async _diningMenusMeta(
    @graphql.Args() args: DiningMenuCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DiningMenu])
  async diningMenus(
    @graphql.Args() args: DiningMenuFindManyArgs
  ): Promise<DiningMenu[]> {
    return this.service.diningMenus(args);
  }

  @graphql.Query(() => DiningMenu, { nullable: true })
  async diningMenu(
    @graphql.Args() args: DiningMenuFindUniqueArgs
  ): Promise<DiningMenu | null> {
    const result = await this.service.diningMenu(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DiningMenu)
  async createDiningMenu(
    @graphql.Args() args: CreateDiningMenuArgs
  ): Promise<DiningMenu> {
    return await this.service.createDiningMenu({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DiningMenu)
  async updateDiningMenu(
    @graphql.Args() args: UpdateDiningMenuArgs
  ): Promise<DiningMenu | null> {
    try {
      return await this.service.updateDiningMenu({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DiningMenu)
  async deleteDiningMenu(
    @graphql.Args() args: DeleteDiningMenuArgs
  ): Promise<DiningMenu | null> {
    try {
      return await this.service.deleteDiningMenu(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
